{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/content_script.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","scriptElements","styleElements","chrome","runtime","getURL","forEach","path","script","document","createElement","src","documentElement","appendChild","push","style","setAttribute","head","window","addEventListener","event","runTimeData","source","data","type","isAngular","onMessage","addListener","request","sender","sendResponse","command","status","postMessage","sendMessage","paths","tooltip","storage","sync","clear"],"mappings":"CAAA,SAAAA,EAAAC,EAAAC,EAAAC,GAAA,SAAAC,EAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,IAAAE,EAAA,mBAAAC,SAAAA,QAAA,IAAAF,GAAAC,EAAA,OAAAA,EAAAF,GAAA,GAAA,GAAAI,EAAA,OAAAA,EAAAJ,GAAA,GAAA,IAAAK,EAAA,IAAAC,MAAA,uBAAAN,EAAA,KAAA,MAAAK,EAAAE,KAAA,mBAAAF,EAAA,IAAAG,EAAAX,EAAAG,GAAA,CAAAS,QAAA,IAAAb,EAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,OAAAI,EAAAH,EAAAI,GAAA,GAAAL,IAAAA,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,OAAAD,EAAAG,GAAAS,QAAA,IAAA,IAAAL,EAAA,mBAAAD,SAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,IAAA,OAAAD,EAAA,CAAA,CAAAa,EAAA,CAAA,SAAAT,EAAAU,EAAAJ,gBCAA,IAAMK,EAAsC,GACtCC,EAAmC,GAapB,CAACC,OAAOC,QAAQC,OAAO,oBAE/BC,QAAQ,SAACX,GAAM,OAYNY,EAZmBZ,GAajCa,EAASC,SAASC,cAAc,WAC/BC,IAAMJ,EACbE,SAASG,gBAAgBC,YAAYL,QACrCP,EAAea,KAAKN,GAJtB,IAAsBD,EACdC,IAXY,CAChBL,OAAOC,QAAQC,OAAO,oBACtBF,OAAOC,QAAQC,OAAO,wBACtBF,OAAOC,QAAQC,OAAO,+BACtBF,OAAOC,QAAQC,OAAO,yBAGdC,QAAQ,SAACX,GAAM,OAUNY,EAVkBZ,GAW/BoB,EAAQN,SAASC,cAAc,SAC/BM,aAAa,MAAO,cAC1BD,EAAMC,aAAa,OAAQT,GAC3BE,SAASQ,KAAKJ,YAAYE,QAC1Bb,EAAcY,KAAKC,GALrB,IAAqBR,EACbQ,IAQNG,OAAOC,iBAAiB,UAAW,SAACC,GAClC,IAuBQC,EAvBJD,EAAME,QAAUJ,SAGI,oBAApBE,EAAMG,KAAKC,OACKJ,EAAMG,KAAKE,UAE3BtB,OAAOC,QAAQsB,UAAUC,YAAY,SAACC,EAASC,EAAQC,GAC9B,QAAnBF,EAAQG,UACVD,EAAa,CAAEE,OAAQ,cACvBd,OAAOe,YACL,CACEF,QAAS,QAEX,QAKN5B,OAAOC,QAAQ8B,YAAY,CAAEH,QAAS,sBAIlB,sBAApBX,EAAMG,KAAKC,OACPH,EAA2B,CAC/Bc,MAAO,CACLC,QAASjC,OAAOC,QAAQC,OAAO,kCAInCa,OAAOe,YACL,CACEF,QAAS,uBACTV,YAAWA,GAEb,SAvENH,OAAOC,iBAAiB,OAAQ,WAC9BhB,OAAOkC,QAAQC,KAAKC","file":"content_script.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","const scriptElements: HTMLScriptElement[] = [];\nconst styleElements: HTMLLinkElement[] = [];\n\ninitContentScript();\n\nfunction initContentScript(): void {\n  injectScriptsAndStyles();\n  startListeningMessagesFromInject();\n  window.addEventListener(\"load\", () => {\n    chrome.storage.sync.clear();\n  });\n}\n\nfunction injectScriptsAndStyles(): void {\n  const scriptPath = [chrome.runtime.getURL(\"inject/index.js\")];\n\n  scriptPath.forEach((p) => injectScript(p));\n\n  const stylePath = [\n    chrome.runtime.getURL(\"styles/index.css\"),\n    chrome.runtime.getURL(\"assets/css/tippy.css\"),\n    chrome.runtime.getURL(\"assets/css/light-border.css\"),\n    chrome.runtime.getURL(\"assets/css/prism.css\"),\n  ];\n\n  stylePath.forEach((p) => injectStyle(p));\n}\n\nfunction injectScript(path: string): void {\n  const script = document.createElement(\"script\");\n  script.src = path;\n  document.documentElement.appendChild(script);\n  scriptElements.push(script);\n}\n\nfunction injectStyle(path: string): void {\n  const style = document.createElement(\"link\");\n  style.setAttribute(\"rel\", \"stylesheet\");\n  style.setAttribute(\"href\", path);\n  document.head.appendChild(style);\n  styleElements.push(style);\n}\n\nfunction startListeningMessagesFromInject(): void {\n  window.addEventListener(\"message\", (event) => {\n    if (event.source != window) {\n      return;\n    }\n    if (event.data.type === \"ng-check-status\") {\n      const isAngular = event.data.isAngular;\n      if (isAngular) {\n        chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n          if (request.command == \"show\") {\n            sendResponse({ status: \"will-show\" });\n            window.postMessage(\n              {\n                command: \"show\",\n              },\n              \"*\"\n            );\n          }\n        });\n      } else {\n        chrome.runtime.sendMessage({ command: \"show-no-ng-popup\" });\n        // TODO: figure out a way to disable menu item for a tab\n      }\n    }\n    if (event.data.type === \"send-runtime-data\") {\n      const runTimeData: RunTimeData = {\n        paths: {\n          tooltip: chrome.runtime.getURL(\"assets/templates/tooltip.ejs\"),\n        },\n      };\n\n      window.postMessage(\n        {\n          command: \"receive-runtime-data\",\n          runTimeData,\n        },\n        \"*\"\n      );\n    }\n  });\n}\n"]}